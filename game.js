/**
 * Simon Game JavaScript
 * A memory game where players must remember and repeat a sequence of colors and sounds
 */

// Game state variables
let gamePattern = []; // Sequence generated by the game
let userClickedPattern = []; // Sequence input by the user
let level = 0; // Current game level
let buttonColors = ["red", "blue", "green", "yellow"]; // Available buttons
let started = false; // Game start status
let highScore = 0; // Track high score

// Initialize game
document.addEventListener('DOMContentLoaded', function() {
  loadHighScore();
});

// Button click event handler
$(".btn").on("click", function() {
  // Only register clicks if game has started
  if (started) {
    const userChosenColor = this.id;
    userClickedPattern.push(userChosenColor);
    
    // Play effects for clicked button
    playSound(userChosenColor);
    animatePress(userChosenColor);
    
    // Check if the user's answer matches the game pattern
    checkAnswer(userClickedPattern.length - 1);
  }
});

// Start game when any key is pressed
$(document).on("keypress", function() {
  if (!started) {
    $("#level-title").text("Level 1");
    nextSequence();
    started = true;
  }
});

// Generate next sequence in the game
function nextSequence() {
  // Reset user pattern for new level
  userClickedPattern = [];
  
  // Increase level
  level++;
  $("#level-title").text("Level " + level);
  
  // Generate random color and add to pattern
  const randomNumber = Math.floor(Math.random() * 4);
  const randomChosenColor = buttonColors[randomNumber];
  gamePattern.push(randomChosenColor);
  
  // Animate the new button in the sequence
  $("#" + randomChosenColor).fadeOut(100).fadeIn(100);
  playSound(randomChosenColor);
}

// Play sound associated with a color
function playSound(name) {
  const audio = new Audio("./sounds/" + name + ".mp3");
  audio.play();
}

// Animate button press
function animatePress(currentColor) {
  $("." + currentColor).addClass("pressed");
  
  setTimeout(function() {
    $("." + currentColor).removeClass("pressed");
  }, 100);
}

// Check if user's answer matches the game pattern
function checkAnswer(currentLevel) {
  // Check if the button clicked matches the game pattern
  if (gamePattern[currentLevel] === userClickedPattern[currentLevel]) {
    
    // If user has completed the sequence
    if (userClickedPattern.length === gamePattern.length) {
      // Track high score
      if (level > highScore) {
        highScore = level;
        saveHighScore();
      }
      
      // Move to next level after delay
      setTimeout(function() {
        nextSequence();
      }, 1000);
    }
  } else {
    // Wrong answer
    playSound("wrong");
    
    // Visual feedback for game over
    $("body").addClass("game-over");
    setTimeout(function() {
      $("body").removeClass("game-over");
    }, 200);
    
    // Update UI message
    $("#level-title").text("Game Over, Press Any Key to Restart");
    
    // Reset game
    startOver();
  }
}

// Reset game state
function startOver() {
  level = 0;
  gamePattern = [];
  started = false;
}

// Save high score to local storage
function saveHighScore() {
  localStorage.setItem('simonHighScore', highScore);
}

// Load high score from local storage
function loadHighScore() {
  const savedScore = localStorage.getItem('simonHighScore');
  if (savedScore !== null) {
    highScore = parseInt(savedScore);
  }
}